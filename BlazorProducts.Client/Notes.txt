These notes are taken following the tutorial found in:
https://code-maze.com/blazor-components/


Blazor Components:
========================================

* Are the key pieces in this technology
* They are composed by HTML elements and code
* Of course HTML elements need to be configured to present some state to the UI
		This visual/content configuration has to be dynamic
		Dynamic behaviour can be achieved by indicating within the elements some variables that can be configured and injected from the container that will use the component.

		Dynamic Content:
				- Just declare that the content depends on a @parameter. And then in the @code section specify a c# property that will yield the required content. Those c# properties has to be decorated with the [Parameter] decorator
				- When declared inside a component, it is just necessary to set the value of the parameter as it was just another html attribute of the component.
				- Even when it is good for simple pieces of content, when trying to pass more complex content through a parameter it could be hard to read/mantain. For this purpose we can use the RenderFragment parameter that can represent plain text, html, or whole other components

				RenderFragment: By default, it thakes the ChildContent as the name of the parameter. If you specify another name you have to indicate the custom name also in the container. 
				
				Cascading Parameters:				
						Sometimes, it is desired to have some parameters to be set automatically without declaring them explicitly in each component inside the container.
						(Useful for example when a given parameter is required to be shared among various components inside a container)
						To achieve this, the attribute is declared a [CascadigParameter] both in the component and in the container.
						The container declares the attribute as a field with a given value:
						private readonly string _color = "#0505b5";
						While the component declares it as a normal property with the decorator [CascadigParameter] the name of the property is irrelevant, since Blazor just check for the type od the property and there is only one property to pass in cascade.
						So if we need to pass multiple values, we create a type with all those values.
						If desired, the cascading parameter can also be referenced by name adding some sintaxis sugar:
						<CascadingValue Name="HeadingColor" Value="@_color">  in the container and then [CascadingParameter(Name = "HeadingColor")] in the component


		Elements style:
				Can be bound to a Dictionary<string, object> that will contain the key/values for all the properties that the elements could have if the (CaptureUnmatchedValues=true) modificator for the [Parameter] decorator is set:
				[Parameter(CaptureUnmatchedValues = true)]
				public Dictionary<string, object> AdditionalAttributes { get; set; }

		Then, the container (this is: the component caller), could specify those attributes from the component declaration itself:
		<Home Title="Welcome to the BlazorProducts.Client application." 
      src="/assets/products.png" alt="products image for the Home component"></Home>
			And those attributes would be injected wherever they apply in a normal HTML

		The container could also determine a property of type Dictionary<string, object> that could have the additional attributes listed inside so the code could be more readable:
		<Home @attributes="AdditionalAttributes"></Home>
		
		@code{
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>
    {
        { "src", "/assets/products.png" },
        { "alt", "products image for the Home component" }
    };

		In this case, the container creates the dictionary that the comnponent expects as a parameter. And de component then distributes the key/values within its HTML elements


		